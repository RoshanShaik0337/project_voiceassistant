import speech_recognition as sr
import webbrowser
import pyttsx3
import feedparser
import logging
import datetime
import random
import re
import operator

# Initialize recognizer and engine
recognizer = sr.Recognizer()
engine = pyttsx3.init()

# Configure logging
logging.basicConfig(filename="jarvis.log", level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# Set female voice
voices = engine.getProperty('voices')
female_voice_found = False

for voice in voices:
    if "female" in voice.name.lower():
        engine.setProperty('voice', voice.id)
        female_voice_found = True
        break  

if not female_voice_found:
    logging.warning("No female voice found. Using default voice.")

def speak(text):
    """Convert text to speech."""
    engine.say(text)
    engine.runAndWait()

def get_news():
    """Fetch and read top 5 news headlines."""
    try:
        url = "http://feeds.bbci.co.uk/news/rss.xml"
        feed = feedparser.parse(url)
        top_articles = feed.entries[:5]

        if top_articles:
            for i, article in enumerate(top_articles):
                title = article.title
                logging.info(f"News {i + 1}: {title}")
                speak(f"Headline {i + 1}: {title}")
        else:
            speak("No news articles found.")
    except Exception as e:
        logging.error(f"Error fetching news: {e}")
        speak("An error occurred while fetching news.")

def tell_time():
    """Tell the current time."""
    current_time = datetime.datetime.now().strftime("%I:%M %p")
    speak(f"The time is {current_time}")

def tell_date():
    """Tell the current date."""
    current_date = datetime.datetime.now().strftime("%A, %B %d, %Y")
    speak(f"Today's date is {current_date}")

def search_google(query):
    """Search Google with the given query."""
    webbrowser.open(f"https://www.google.com/search?q={query}")
    speak(f"Here are the results for {query}")

def tell_joke():
    """Tell a random joke."""
    jokes = [
        "Why don't scientists trust atoms? Because they make up everything!",
        "Parallel lines have so much in common. It’s a shame they’ll never meet.",
        "Why was the math book sad? It had too many problems.",
        "I'm reading a book about anti-gravity. It's impossible to put down!"
    ]
    joke = random.choice(jokes)
    speak(joke)

def calculate(expression):
    """Perform simple calculations based on user input."""
    operators = {
        "plus": "+", "add": "+",
        "minus": "-", "subtract": "-",
        "multiplied by": "*", "times": "*",
        "divided by": "/", "over": "/"
    }

    # Convert words to symbols
    for word, symbol in operators.items():
        expression = expression.replace(word, symbol)

    # Extract numbers and operator
    pattern = r"(\d+)\s*([\+\-\*/])\s*(\d+)"
    match = re.search(pattern, expression)

    if match:
        num1, op, num2 = int(match.group(1)), match.group(2), int(match.group(3))
        result = eval(f"{num1} {op} {num2}")  
        speak(f"The answer is {result}")
    else:
        speak("Sorry, I couldn't understand the calculation.")

def process_command(command):
    """Process voice command and execute corresponding actions."""
    command = command.lower()
    
    if "open google" in command:
        webbrowser.open("https://www.google.com")
    elif "open facebook" in command:
        webbrowser.open("https://www.facebook.com")
    elif "open youtube" in command:
        webbrowser.open("https://www.youtube.com")
    elif "open linkedin" in command:
        webbrowser.open("https://www.linkedin.com")
    elif "news" in command:
        get_news()
    elif "time" in command:
        tell_time()
    elif "date" in command:
        tell_date()
    elif "search" in command:
        query = command.replace("search", "").strip()
        search_google(query)
    elif "joke" in command:
        tell_joke()
    elif "calculate" in command or any(op in command for op in ["plus", "minus", "multiplied by", "divided by"]):
        expression = command.replace("calculate", "").strip()
        calculate(expression)
    elif "exit" in command or "quit" in command:
        speak("Goodbye!")
        return False
    else:
        speak("Sorry, I didn't understand the command.")
    return True

def listen_for_command():
    """Listen for a command from the user."""
    with sr.Microphone() as source:
        recognizer.adjust_for_ambient_noise(source)
        speak("Listening for your command...")
        try:
            audio = recognizer.listen(source, timeout=5, phrase_time_limit=5)
            return recognizer.recognize_google(audio).lower()
        except sr.UnknownValueError:
            speak("Sorry, I did not understand that.")
        except sr.RequestError as e:
            logging.error(f"Google Speech Recognition error: {e}")
            speak("There was an issue with the speech recognition service.")
        except Exception as e:
            logging.error(f"Error: {e}")
            speak("An error occurred. Please try again.")
    return None

if __name__ == "__main__":
    speak("Initializing Jarvis...")
    while True:
        command = listen_for_command()
        if command and not process_command(command):
            break

